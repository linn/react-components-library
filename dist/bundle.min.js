'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Tooltip = _interopDefault(require('@material-ui/core/Tooltip'));
var SvgIcon = _interopDefault(require('@material-ui/core/SvgIcon'));
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var Button = _interopDefault(require('@material-ui/core/Button'));
var Table = _interopDefault(require('@material-ui/core/Table'));
var TableBody = _interopDefault(require('@material-ui/core/TableBody'));
var TableCell = _interopDefault(require('@material-ui/core/TableCell'));
var TableHead = _interopDefault(require('@material-ui/core/TableHead'));
var TableRow = _interopDefault(require('@material-ui/core/TableRow'));
var Paper = _interopDefault(require('@material-ui/core/Paper'));
var classnames = _interopDefault(require('classnames'));
var Modal = _interopDefault(require('@material-ui/core/Modal'));
var numeral = _interopDefault(require('numeral'));
var reactRouterDom = require('react-router-dom');
var PropTypes = _interopDefault(require('prop-types'));
var MuiThemeProvider = _interopDefault(require('@material-ui/core/styles/MuiThemeProvider'));
var icons = require('@material-ui/icons');
var red = _interopDefault(require('@material-ui/core/colors/red'));
var React = require('react');
var React__default = _interopDefault(React);
var core = require('@material-ui/core');
var styles = require('@material-ui/core/styles');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var styles$1 = function styles$$1(theme) {
  return {
    pullLeft: {
      float: 'left'
    }
  };
};

var BackButton =
/*#__PURE__*/
function (_Component) {
  _inherits(BackButton, _Component);

  function BackButton() {
    _classCallCheck(this, BackButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(BackButton).apply(this, arguments));
  }

  _createClass(BackButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          backClick = _this$props.backClick,
          classes = _this$props.classes;
      return React__default.createElement("div", {
        className: classes.pullLeft
      }, React__default.createElement(Button, {
        id: "back-button",
        onClick: function onClick() {
          return backClick();
        }
      }, "Back"));
    }
  }]);

  return BackButton;
}(React.Component);

var BackButton$1 = styles.withStyles(styles$1)(BackButton);

var styles$2 = function styles$$1(theme) {
  return {};
};

var ExportButton =
/*#__PURE__*/
function (_Component) {
  _inherits(ExportButton, _Component);

  function ExportButton() {
    _classCallCheck(this, ExportButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(ExportButton).apply(this, arguments));
  }

  _createClass(ExportButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          classes = _this$props.classes,
          href = _this$props.href;
      return React__default.createElement("div", {
        className: classes.pullLeft
      }, React__default.createElement(Tooltip, {
        title: "Download report as CSV file",
        placement: "top-end"
      }, React__default.createElement(Button, {
        variant: "contained",
        href: href
      }, "Export", React__default.createElement(SvgIcon, null, React__default.createElement("path", {
        xmlns: "http://www.w3.org/2000/svg",
        d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
      })))));
    }
  }]);

  return ExportButton;
}(React.Component);

var ExportButton$1 = styles.withStyles(styles$2)(ExportButton);

var Breadcrumbs =
/*#__PURE__*/
function (_Component) {
  _inherits(Breadcrumbs, _Component);

  function Breadcrumbs() {
    _classCallCheck(this, Breadcrumbs);

    return _possibleConstructorReturn(this, _getPrototypeOf(Breadcrumbs).apply(this, arguments));
  }

  _createClass(Breadcrumbs, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          location = _this$props.location,
          history = _this$props.history,
          _this$props$rootPathL = _this$props.rootPathLength,
          rootPathLength = _this$props$rootPathL === void 0 ? 2 : _this$props$rootPathL;
      var crumbs = location.pathname.split('/').reduce(function (sofar, crumb, i, crumbs) {
        var path = crumbs.slice(0, i + 1);
        var href = path.join('/') || '/';

        var handleClick = function handleClick(e) {
          // we should just let the browser handle any paths
          // shorter than our root path, e.g.the 'Home' path
          if (path.length > rootPathLength) {
            e.preventDefault();
            history.push(href);
          }
        };

        return _toConsumableArray(sofar).concat([{
          key: i,
          caption: crumb || 'Home',
          href: href,
          onClick: function onClick(e) {
            return handleClick(e);
          }
        }]);
      }, []);
      return React__default.createElement("div", null, crumbs.map(function (crumb) {
        return React__default.createElement("span", null, React__default.createElement(Button, {
          variant: "contained"
        }, React__default.createElement(reactRouterDom.Link, {
          to: crumb.href
        }, " ", crumb.caption, "  "), " "), " ", React__default.createElement(icons.ChevronRight, null));
      }));
    }
  }]);

  return Breadcrumbs;
}(React.Component);

var styles$3 = function styles$$1(theme) {
  return {
    pullRight: {
      float: 'right'
    }
  };
};

var SaveCancelButtons =
/*#__PURE__*/
function (_Component) {
  _inherits(SaveCancelButtons, _Component);

  function SaveCancelButtons() {
    _classCallCheck(this, SaveCancelButtons);

    return _possibleConstructorReturn(this, _getPrototypeOf(SaveCancelButtons).apply(this, arguments));
  }

  _createClass(SaveCancelButtons, [{
    key: "render",
    value: function render() {
      var _React$createElement;

      var _this$props = this.props,
          saveClick = _this$props.saveClick,
          cancelClick = _this$props.cancelClick,
          classes = _this$props.classes,
          disabled = _this$props.disabled;
      return React__default.createElement("div", {
        className: classes.pullRight
      }, React__default.createElement(Button, {
        id: "cancel-button",
        onClick: function onClick() {
          return cancelClick();
        },
        disabled: disabled
      }, "Cancel"), React__default.createElement(Button, (_React$createElement = {
        id: "save-button",
        variant: "outlined"
      }, _defineProperty(_React$createElement, "variant", "contained"), _defineProperty(_React$createElement, "color", "primary"), _defineProperty(_React$createElement, "onClick", function onClick() {
        return saveClick();
      }), _defineProperty(_React$createElement, "disabled", disabled), _React$createElement), "Save"));
    }
  }]);

  return SaveCancelButtons;
}(React.Component);

var SaveCancelButtons$1 = styles.withStyles(styles$3)(SaveCancelButtons);

var styles$4 = {
  textField: {
    width: "100%",
    margin: "0 auto"
  },
  label: {
    fontSize: 16,
    color: "#afaeae"
  },
  input: {
    fontSize: 16,
    fontWeight: "bold"
  }
};

var FormField =
/*#__PURE__*/
function (_Component) {
  _inherits(FormField, _Component);

  function FormField(props) {
    var _this;

    _classCallCheck(this, FormField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormField).call(this, props));
    _this.state = {
      value: _this.props.value
    };
    return _this;
  }

  _createClass(FormField, [{
    key: "onChange",
    value: function onChange(e) {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          propertyName = _this$props.propertyName;
      this.state.value = e.target.value;

      if (onChange) {
        onChange(propertyName, e.target.value);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          config = _this$props2.config,
          value = _this$props2.value,
          classes = _this$props2.classes;
      return React__default.createElement("div", null, React__default.createElement(TextField, {
        label: config.label,
        id: "margin-normal",
        type: config.type,
        value: value,
        disabled: config.disabled,
        className: classes.textField,
        InputProps: {
          className: classes.input,
          shrink: true
        },
        InputLabelProps: {
          className: classes.label,
          shrink: true
        },
        onChange: function onChange(e) {
          return _this2.onChange(e);
        },
        helperText: config.required ? "Required" : ""
      }));
    }
  }]);

  return FormField;
}(React.Component);

var FormField$1 = styles.withStyles(styles$4)(FormField);

var format = function format(i, prefix, suffix, decimalPlaces) {
  var decimalPlaceTemplate;

  if (!decimalPlaces || decimalPlaces === '0') {
    decimalPlaceTemplate = '';
  } else {
    decimalPlaceTemplate = '.' + Array(decimalPlaces + 1).join("0");
  }

  if (i || i === 0) {
    return (prefix ? prefix : '') + numeral(i).format("0,0".concat(decimalPlaceTemplate)) + (suffix ? suffix : '');
  }

  return null;
};
var formatTitle = function formatTitle(title, showTitle, loading, error, helpText) {
  if (error) {
    return React__default.createElement("strong", null, "Error");
  }

  if (!showTitle) {
    return false;
  }

  var displayTitle;

  if (title && title.displayString) {
    displayTitle = title.displayString;
  } else {
    displayTitle = title;
  }

  if (loading) {
    return React__default.createElement("h5", null, "".concat(displayTitle, " (loading)"));
  }

  return React__default.createElement("div", {
    className: "row"
  }, React__default.createElement("div", {
    className: "col-xs-11"
  }, React__default.createElement("h5", null, setDrilldown(title))), helpText ? React__default.createElement("div", {
    className: "col-xs-1"
  }, React__default.createElement(Modal, {
    "aria-labelledby": "simple-modal-title",
    "aria-describedby": "simple-modal-description"
  }, helpText)) : '');
};
var setDrilldown = function setDrilldown(item) {
  var displayItem, href;

  if (item && item.hasOwnProperty('displayString')) {
    displayItem = item.displayString;

    if (item.drillDowns.length > 0) {
      href = item.drillDowns[0].href;
    }
  } else {
    displayItem = item;
  }

  if (href) {
    return React__default.createElement(reactRouterDom.Link, {
      to: href
    }, displayItem);
  }

  return displayItem;
};
var setValueDrilldown = function setValueDrilldown(value) {
  var displayItem;

  if (value && (value.displayValue || value.displayValue === 0)) {
    if (value.drillDowns && value.drillDowns.length > 0) {
      displayItem = React__default.createElement(reactRouterDom.Link, {
        className: "link-value",
        tof: value.drillDowns[0].href
      }, format(value.displayValue, value.prefix, value.suffix, value.decimalPlaces));
    } else {
      displayItem = format(value.displayValue, value.prefix, value.suffix, value.decimalPlaces);
    }
  } else {
    displayItem = null;
  }

  return displayItem;
};
var setTextValueDrilldown = function setTextValueDrilldown(value) {
  var displayItem;

  if (value && value.textDisplayValue) {
    if (value.drillDowns && value.drillDowns.length > 0) {
      displayItem = React__default.createElement(reactRouterDom.Link, {
        className: "link-value",
        to: value.drillDowns[0].href
      }, value.textDisplayValue);
    } else {
      displayItem = value.textDisplayValue;
    }
  } else {
    displayItem = null;
  }

  return displayItem;
};
var displayError = function displayError(message) {
  return React__default.createElement("h5", {
    className: "error-message"
  }, message);
};

var headersType = PropTypes.shape({
  rowHeader: PropTypes.string.isRequired,
  columnHeaders: PropTypes.arrayOf(PropTypes.string).isRequired,
  varianceColumns: PropTypes.arrayOf(PropTypes.number).isRequired
});
var resultDetailsType = PropTypes.shape({
  rowTitle: PropTypes.object.isRequired,
  rowSortOrder: PropTypes.number,
  values: PropTypes.arrayOf(PropTypes.object).isRequired
});
var reportResultType = PropTypes.shape({
  title: PropTypes.object,
  resultType: PropTypes.string,
  reportValueType: PropTypes.string,
  headers: headersType,
  results: PropTypes.arrayOf(resultDetailsType).isRequired,
  totals: resultDetailsType
});

var styles$5 = function styles$$1(theme) {
  return {
    root: {
      width: '100%',
      margin: theme.spacing.unit * 3,
      overflowX: 'auto'
    },
    table: {
      margin: theme.spacing.unit * 3
    }
  };
};

var theme = styles.createMuiTheme({
  overrides: {
    MuiTableCell: {
      body: {
        fontSize: "12px"
      },
      head: {
        fontSize: "14px"
      }
    }
  }
});

var getCellClassName = function getCellClassName(isVarianceColumn, isTotalColumn, value, textValue) {
  var defaults = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  return classnames(defaults, {
    'variance-positive': isVarianceColumn && value > 0
  }, {
    'variance-negative': isVarianceColumn && value < 0
  }, {
    'success total': isTotalColumn
  }, {
    'text-right': !textValue
  });
};

var getTableClassNames = function getTableClassNames(containsSubtotals) {
  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return classnames(defaults, 'table', 'table-condensed', 'table-bordered', 'small', {
    'table-striped': !containsSubtotals
  });
};

var getTableRowClassNames = function getTableRowClassNames(rowType, containsSubtotals) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return classnames(defaults, {
    'subtotal-row active': containsSubtotals && rowType === 'Subtotal'
  }, {
    'success': rowType === 'Total'
  });
};

var getTableHeaderClassNames = function getTableHeaderClassNames(cellHeader, fixColumnWidth, isTextColumn) {
  var defaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  return classnames(defaults, {
    'col-xs-1': fixColumnWidth && cellHeader
  }, {
    'col-xs-2': fixColumnWidth && !cellHeader
  }, {
    'text-right': !isTextColumn
  });
};

var Placeholder = function Placeholder(_ref) {
  var rows = _ref.rows,
      columns = _ref.columns;
  return React__default.createElement(Table, {
    className: "table placeholder table-placeholder"
  }, React__default.createElement(TableBody, null, _toConsumableArray(Array(rows).keys()).map(function (row) {
    return React__default.createElement(TableRow, {
      key: row
    }, _toConsumableArray(Array(columns).keys()).map(function (column) {
      return React__default.createElement(TableCell, {
        key: column
      });
    }));
  })));
};

var ReportTable = function ReportTable(_ref2) {
  var reportData = _ref2.reportData,
      title = _ref2.title,
      _ref2$showTitle = _ref2.showTitle,
      showTitle = _ref2$showTitle === void 0 ? true : _ref2$showTitle,
      _ref2$showTotals = _ref2.showTotals,
      showTotals = _ref2$showTotals === void 0 ? true : _ref2$showTotals,
      _ref2$placeholderRows = _ref2.placeholderRows,
      placeholderRows = _ref2$placeholderRows === void 0 ? 5 : _ref2$placeholderRows,
      _ref2$placeholderColu = _ref2.placeholderColumns,
      placeholderColumns = _ref2$placeholderColu === void 0 ? 6 : _ref2$placeholderColu,
      _ref2$containsSubtota = _ref2.containsSubtotals,
      containsSubtotals = _ref2$containsSubtota === void 0 ? false : _ref2$containsSubtota,
      _ref2$fixColumnWidths = _ref2.fixColumnWidths,
      fixColumnWidths = _ref2$fixColumnWidths === void 0 ? false : _ref2$fixColumnWidths,
      _ref2$showRowTitles = _ref2.showRowTitles,
      showRowTitles = _ref2$showRowTitles === void 0 ? true : _ref2$showRowTitles;
  return React__default.createElement(MuiThemeProvider, {
    theme: theme
  }, React__default.createElement(Paper, {
    className: styles$5.root
  }, formatTitle(title, showTitle, !reportData, reportData && reportData.error, reportData ? reportData.reportHelpText : null), !reportData ? React__default.createElement(Placeholder, {
    rows: placeholderRows,
    columns: placeholderColumns
  }) : reportData.error ? displayError(reportData.message) : React__default.createElement("div", {
    style: {
      backgroundColor: "white"
    }
  }, React__default.createElement(Table, {
    className: getTableClassNames(containsSubtotals)
  }, React__default.createElement(TableHead, {
    key: "headers"
  }, React__default.createElement(TableRow, null, showRowTitles ? React__default.createElement(TableCell, {
    className: getTableHeaderClassNames(false, fixColumnWidths, '')
  }) : null, reportData.headers.columnHeaders.map(function (header, i) {
    return React__default.createElement(TableCell, {
      className: getTableHeaderClassNames(true, fixColumnWidths, reportData.headers.textColumns.includes(i), []),
      key: i
    }, header);
  }))), React__default.createElement(TableBody, null, reportData.results.map(function (item, j) {
    return React__default.createElement(TableRow, {
      className: getTableRowClassNames(item.rowType, containsSubtotals, ['report-data-row']),
      key: j
    }, showRowTitles ? React__default.createElement(TableCell, {
      className: "single-line-field",
      "data-tip": item.rowTitle.displayString
    }, setDrilldown(item.rowTitle)) : null, item.values.map(function (value, i) {
      return React__default.createElement(TableCell, {
        className: getCellClassName(reportData.headers.varianceColumns.includes(i) || reportData.headers.varianceRows.includes(j), reportData.headers.totalColumns.includes(i), value.displayValue, value.textDisplayValue, []),
        key: i
      }, setValueDrilldown(value), setTextValueDrilldown(value));
    }));
  }), showTotals ? React__default.createElement(TableRow, {
    className: getTableRowClassNames(reportData.totals.rowType, containsSubtotals, ['report-totals']),
    key: "totals"
  }, showRowTitles ? React__default.createElement(TableCell, null, reportData.totals.rowTitle.displayString) : null, reportData.totals.values.map(function (value, i) {
    return React__default.createElement(TableCell, {
      className: getCellClassName(reportData.headers.varianceColumns.includes(i), reportData.headers.totalColumns.includes(i), value.displayValue, value.textDisplayValue, ['total']),
      key: i
    }, setValueDrilldown(value));
  })) : false)))));
};

Table.propTypes = {
  reportData: reportResultType,
  title: PropTypes.object,
  showTitle: PropTypes.bool,
  showTotals: PropTypes.bool,
  placeholderRows: PropTypes.number,
  placeholderColumns: PropTypes.number,
  containsSubtotals: PropTypes.bool,
  fixColumnWidths: PropTypes.bool,
  showRowTitles: PropTypes.bool
};
var ReportTable$1 = styles.withStyles(styles$5)(ReportTable);

var styles$6 = {
  outer: {
    textAlign: 'center',
    margin: '20px',
    height: '40px'
  },
  loading: {
    backgroundColor: '#88cbf0',
    height: '100%',
    width: '6px',
    animation: 'stretchdelay 1.2s infinite ease-in-out',
    display: 'inline-block'
  }
};

var Loading =
/*#__PURE__*/
function (_Component) {
  _inherits(Loading, _Component);

  function Loading() {
    _classCallCheck(this, Loading);

    return _possibleConstructorReturn(this, _getPrototypeOf(Loading).apply(this, arguments));
  }

  _createClass(Loading, [{
    key: "render",
    value: function render() {
      var styleSheet = document.styleSheets[0];
      var keyframes = "@keyframes stretchdelay {\n            0%, 40%, 100% {\n                transform: scaleY(0.2);\n                -webkit-transform: scaleY(0.2);\n            }\n        \n            20% {\n                transform: scaleY(1.0);\n                -webkit-transform: scaleY(1.0);\n            }\n        }";
      styleSheet.insertRule(keyframes, styleSheet.cssRules.length);
      return React__default.createElement("div", {
        style: styles$6.outer
      }, React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading)
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading, {
          animationDelay: '-1.0s'
        })
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading, {
          animationDelay: '-0.9s'
        })
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading, {
          animationDelay: '-0.8s'
        })
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading, {
          animationDelay: '-0.7s'
        })
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$6.loading, {
          animationDelay: '-0.6s'
        })
      }));
    }
  }]);

  return Loading;
}(React.Component);

var styles$7 = {
  outer: {
    textAlign: 'center',
    height: '32px',
    paddingRight: '10px',
    display: 'inline-block'
  },
  loading: {
    backgroundColor: '#88cbf0',
    height: '100%',
    width: '6px',
    animation: 'stretchdelay 1.2s infinite ease-in-out',
    display: 'inline-block'
  }
};

var MiniLoading =
/*#__PURE__*/
function (_Component) {
  _inherits(MiniLoading, _Component);

  function MiniLoading() {
    _classCallCheck(this, MiniLoading);

    return _possibleConstructorReturn(this, _getPrototypeOf(MiniLoading).apply(this, arguments));
  }

  _createClass(MiniLoading, [{
    key: "render",
    value: function render() {
      return React__default.createElement("div", {
        style: styles$7.outer
      }, React__default.createElement("div", {
        style: _objectSpread({}, styles$7.loading)
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$7.loading, {
          animationDelay: '-1.0s'
        })
      }), ' ', React__default.createElement("div", {
        style: _objectSpread({}, styles$7.loading, {
          animationDelay: '-0.9s'
        })
      }), ' ');
    }
  }]);

  return MiniLoading;
}(React.Component);

var styles$8 = function styles$$1(theme) {
  return {
    root: {
      margin: theme.spacing.unit,
      minWidth: 120,
      marginBottom: '20px',
      width: '100%'
    },
    typography: {
      fontSize: 16
    }
  };
};

var Dropdown = function Dropdown(_ref) {
  var classes = _ref.classes,
      label = _ref.label,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      onChange = _ref.onChange,
      value = _ref.value;
  return React__default.createElement(core.FormControl, {
    className: "".concat(classes.root, " ").concat(classes.typography)
  }, React__default.createElement(core.InputLabel, {
    className: classes.typography
  }, label), React__default.createElement(core.Select, {
    className: classes.typography,
    value: value,
    onChange: onChange
  }, items && items.map(function (item) {
    return React__default.createElement(core.MenuItem, {
      key: item,
      className: classes.typography,
      value: item
    }, item);
  })));
};

var Dropdown$1 = styles.withStyles(styles$8)(Dropdown);

var errorTheme = styles.createMuiTheme({
  palette: {
    background: {
      paper: red[100]
    }
  },
  typography: {
    useNextVariants: true
  }
});

var styles$9 = function styles$$1() {
  return {
    root: {
      display: 'flex',
      justifyContent: 'center',
      width: '50%',
      margin: 'auto',
      padding: 10
    },
    icon: {
      marginRight: 5
    },
    typography: {
      fontSize: 16
    }
  };
};

var ErrorCard = function ErrorCard(_ref) {
  var classes = _ref.classes,
      errorMessage = _ref.errorMessage;
  return React__default.createElement(styles.MuiThemeProvider, {
    theme: errorTheme
  }, React__default.createElement(core.Card, {
    className: classes.root
  }, React__default.createElement(icons.Error, {
    color: "error",
    className: classes.icon
  }), React__default.createElement(core.Typography, {
    align: "center",
    className: classes.typography
  }, errorMessage)));
};

var ErrorCard$1 = styles.withStyles(styles$9)(ErrorCard);

var styles$a = {
  root: {
    width: '100%',
    fontSize: 14
  }
};

var CheckboxWithLabel = function CheckboxWithLabel(_ref) {
  var classes = _ref.classes,
      checked = _ref.checked,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'primary' : _ref$color,
      label = _ref.label,
      onChange = _ref.onChange;
  return React__default.createElement(core.FormControlLabel, {
    label: label,
    classes: {
      label: "".concat(classes.root)
    },
    control: React__default.createElement(core.Checkbox, {
      checked: checked,
      onChange: onChange,
      color: color
    })
  });
};

var CheckboxWithLabel$1 = styles.withStyles(styles$a)(CheckboxWithLabel);

exports.Breadcrumbs = Breadcrumbs;
exports.BackButton = BackButton$1;
exports.CheckboxWithLabel = CheckboxWithLabel$1;
exports.Dropdown = Dropdown$1;
exports.ErrorCard = ErrorCard$1;
exports.FormField = FormField$1;
exports.SaveCancelButtons = SaveCancelButtons$1;
exports.ReportTable = ReportTable$1;
exports.ExportButton = ExportButton$1;
exports.Loading = Loading;
exports.MiniLoading = MiniLoading;
